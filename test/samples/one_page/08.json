{
  "effect": "raw-fetch",
  "in": {
    "url": "https://api.telegra.ph/createPage",
    "props": {
      "method": "POST",
      "headers": {
        "content-type": "application/json"
      },
      "body": "{\"title\":\"Compose updates\",\"access_token\":\"0123456789012345678901234567890123456789\",\"author_name\":\"Compose News\",\"author_url\":\"https://github.com/y2k/compose_news\",\"content\":[{\"tag\":\"h3\",\"attrs\":{},\"children\":[\"Оглавление\"]},{\"tag\":\"ul\",\"attrs\":{},\"children\":[{\"tag\":\"li\",\"attrs\":{},\"children\":[{\"tag\":\"a\",\"attrs\":{\"href\":\"#XR-Compose-1.0.0-alpha01\"},\"children\":[\"XR Compose 1.0.0-alpha01\"]}]},{\"tag\":\"li\",\"attrs\":{},\"children\":[{\"tag\":\"a\",\"attrs\":{\"href\":\"#XR-Compose-Material3-1.0.0-alpha01\"},\"children\":[\"XR Compose Material3 1.0.0-alpha01\"]}]},{\"tag\":\"li\",\"attrs\":{},\"children\":[{\"tag\":\"a\",\"attrs\":{\"href\":\"#Compose-Material-3-1.4.0-alpha05\"},\"children\":[\"Compose Material 3 1.4.0-alpha05\"]}]},{\"tag\":\"li\",\"attrs\":{},\"children\":[{\"tag\":\"a\",\"attrs\":{\"href\":\"#Compose-Material-3-Adaptive-1.1.0-alpha08\"},\"children\":[\"Compose Material 3 Adaptive 1.1.0-alpha08\"]}]}]},{\"tag\":\"hr\",\"attrs\":null,\"children\":[]},{\"tag\":\"a\",\"attrs\":{\"href\":\"https://developer.android.com/jetpack/androidx/releases/xr-compose#1.0.0-alpha01\"},\"children\":[{\"tag\":\"h3\",\"attrs\":null,\"children\":[\"XR Compose 1.0.0-alpha01\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"Features of Initial Release\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Initial developer release of Jetpack Compose for XR. Use familiar Compose concepts such as rows and columns to create spatial UI layouts in XR, whether you're porting an existing 2D app to XR or creating a new XR app from scratch. This library provides subspace and spatial composables: such as spatial panels and orbiters, which let you place your existing 2D Compose or Views-based UI in a spatial layout. It introduces the Volume subspace composable, which allows you to place SceneCore entities, such as 3D models, relative to your UI. Learn more in this developer guide:\\n\\n\\nSubspace: This composable can be placed anywhere within your app’s UI hierarchy, allowing you to maintain layouts for 2D and spatial UI without losing context between files. This makes it easier to share things like existing app architecture between XR and other form factors without needing to hoist state through your whole UI tree or re-architect your app.\\nSpatialPanel: A spatial panel is a subspace composable that lets you display app content–for example, you could display video playback, still images, or any other content in a spatial panel.\\nOrbiter: An orbiter is a spatial UI component. It's designed to be attached to a corresponding spatial panel, and contains navigation and contextual action items related to that spatial panel. For example, if you've created a spatial panel to display video content, you could add video playback controls inside an orbiter.\\nVolume: Place SceneCore entities, such as 3D models, relative to your UI.\\n\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Spatial Layout:\\nYou can create multiple spatial panels and place them within a Spatial Layout using SpatialRow, SpatialColumn, SpatialBox, and SpatialLayoutSpacer.\\nUse SubspaceModifiers to customize your layout.\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Spatial UI components: These elements can be reused in your 2D UI, and their spatial attributes will only be visible when spatial capabilities are enabled.\\n\\n\\nSpatialDialog: Panel will push slightly back in z-depth to display an elevated dialog. \\nSpatialPopUp: Panel will push slightly back in z-depth to display an elevated popup\\nSpatialElevation: SpatialElevationLevel can be set to add elevation.\\n\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"SpatialCapabilities: Spatial capabilities can change as users interact with your app or the system, or can even be changed by your app itself—for example, moving into Home Space or Full Space. To avoid issues, your app needs to check for LocalSpatialCapabilities.current to determine which APIs are supported in the current environment.\\nisSpatialUiEnabled: Spatial UI elements (e.g. SpatialPanel)\\nisContent3dEnabled: 3D objects\\nisAppEnvironmentEnabled: The environment\\nisPassthroughControlEnabled: Whether or not the application can control the passthrough state\\nisSpatialAudioEnabled: Spatial audio\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"Known Issues\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Currently a minSDK of 30 is required to use Jetpack Compose for XR. As a workaround you may add the following manifest entry <uses-sdk tools:overrideLibrary=&quot;androidx.xr.scenecore, androidx.xr.compose&quot;/> to be able to build and run with a minSDK of 23.\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Jetpack XR apps currently require requesting android.permission.SCENE_UNDERSTANDING permission in the AndroidManifest.\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"When an app launches directly into Full Space using the PROPERTY_XR_ACTIVITY_START_MODE property in their manifest, Activities/Applications are initially opened in Home Space before transitioning into Full Space.\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"glTFs in Volume Composables may initially flicker at the wrong location.\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Using a SpatialDialog in a panel that has been moved significantly will push the content in the wrong direction.\"]}]},{\"tag\":\"hr\",\"attrs\":null,\"children\":[]},{\"tag\":\"a\",\"attrs\":{\"href\":\"https://developer.android.com/jetpack/androidx/releases/xr-compose-material3#1.0.0-alpha01\"},\"children\":[{\"tag\":\"h3\",\"attrs\":null,\"children\":[\"XR Compose Material3 1.0.0-alpha01\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"Features of Initial Release\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Navigation rail in any Compose layout, including NavigationSuiteScaffold will automatically adapt to XR Orbiter. For more information, read Material Design guidelines.\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Navigation bar in any Compose layout, including NavigationSuiteScaffold will automatically adapt to XR Orbiter. For more information, read Material Design guidelines.\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"Known Issues\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"ListDetailPaneScaffold and SupportingPaneScaffold currently don’t support multiple spatial panels\"]}]},{\"tag\":\"hr\",\"attrs\":null,\"children\":[]},{\"tag\":\"a\",\"attrs\":{\"href\":\"https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-alpha05\"},\"children\":[{\"tag\":\"h3\",\"attrs\":null,\"children\":[\"Compose Material 3 1.4.0-alpha05\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"API Changes\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Replace type in WideNavigationRailState.current/target value for an enum for better readability (I2d6ab)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"SplitButton change Shape api from data class to class for binary compatibility. (I53812)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Added a tooltip API that has a onDismissRequest parameter so makers can decide what happens when a user clicks outside of the tooltip. Deprecated the old API that doesn't contain this new parameter. (I99aef)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Change naming of opticalCentering to horizontalCenterOptically. Making the modifier internal. Replace padding parameter with max start and end offset. (I0b904)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Change WideNavigationRailState to have current/target value, remove enums in favor of boolean. (Idfa29, b/356039090)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Add NavigationBarItemComponentOverride. (I3a06a)\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"Bug Fixes\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Fix the top and bottom app-bar behaviors to reliably change color when content is scrolled all the way. (Idc4e8, b/293665988)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Scroll behavior functions for top and bottom app bars now return a remembered behavior to perform better across recompositions. (I0fdbe, b/207957336)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Modifier pararemeter is now applied after internal modifiers such as dragging behavior and semantics, instead of before. This affects the ordering in which modifiers are applied. (I8d83f)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Expanded bottom sheet remains expanded on size change. (I2870b, b/324934884)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Correctly route status and navigation bar flags for windows properties. (Ie674d, b/362539765)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Move modifier parameter to the scaffolds root, as documented. This aligns implementation with M2. (I0235e, b/372311595)\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"External Contribution\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Commonized DatePickerDialog function. (I7dced)\"]}]},{\"tag\":\"hr\",\"attrs\":null,\"children\":[]},{\"tag\":\"a\",\"attrs\":{\"href\":\"https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.1.0-alpha08\"},\"children\":[{\"tag\":\"h3\",\"attrs\":null,\"children\":[\"Compose Material 3 Adaptive 1.1.0-alpha08\"]}]},{\"tag\":\"h4\",\"attrs\":null,\"children\":[\"API Changes\"]},{\"tag\":\"ul\",\"attrs\":null,\"children\":[{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Introduce currentWindowDpSize function. (I99125, b/296300441)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Expose PaneScaffoldParentData and ThreePaneScaffoldHorizontalOrder.toLtrOrder() (I2d6b7)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Remove PaneScaffoldMotionScope and turn it into a field under PaneScaffoldTransitionScope. Also rename it to PaneScaffoldMotionDataProvider and remove the access to the underlying data structure of PaneMotionData - instead, provide getter and looping methods for accessing the data. (Id8884)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Create overriding mechanism for ThreePaneScaffold to support sideloading implementations for different form factors. (I5280f)\"]},{\"tag\":\"li\",\"attrs\":null,\"children\":[\"Makes pane expansion state null by default (Ia65f8, b/376394520)\"]}]}]}"
    }
  }
}